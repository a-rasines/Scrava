package base;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class GraphicsPanel extends JPanel{
	private static final long serialVersionUID = 1L;
	/**
	 * For access ease, this is the only instance of GraphicsPanel, calling this variable gives you access to all of the class' options
	 */
	public static final GraphicsPanel INSTANCE = new GraphicsPanel();
	
	// Here are stored all rendered sprites
	private List<Sprite> sprites;
	
	private GraphicsPanel() {
		sprites = new ArrayList<>();
	}
	
	/**
	 * Adds a new sprite to render
	 * @param s The sprite instance to add to the render queue
	 */
	public void addSprite(Sprite s) {
		sprites.add(s);
		repaint();
	}
	
	/**
	 * Returns a copy of the list containing the sprites. No modification in the list will affect the simulation
	 * @return
	 */
	public List<Sprite> getSprites() {
		return new ArrayList<>(sprites);
	}
	
	/**
	 * Removes an sprite instance from the simulation
	 * @param sprite
	 */
	public void removeSprite(Sprite sprite) {
		sprites.remove(sprite);
		repaint();
	}
	
	//Here's where all the render magic occurs
	@Override
	public void paintComponent(Graphics g) {
		g.setColor(Color.white);
		g.fillRect(0, 0, getWidth(), getHeight()); //Background
		for(Sprite s : sprites)
			g.drawImage(
				s.getTexture(), 										// Texture
				s.getPosition().x - s.getTexture().getWidth(null) / 2,  // X position (pivot set on center of image
				s.getPosition().y - s.getTexture().getHeight(null) / 2, // Y position (pivot set on center of image
				null													// N/A
			);
	}
	
	public static void main(String[] args) {
		JFrame frame = new JFrame(); //Creates the window
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); //Terminate the program after closing
		frame.setSize(new Dimension(1000, 667)); //The size is set to keep the proportion shown in the editor
		frame.setResizable(false); //Remove this line if you want your user to be able to adjust the size of the game
		frame.add(GraphicsPanel.INSTANCE, BorderLayout.CENTER); //Adds the graphic component
		EventSystem.handle(frame, INSTANCE);
		
		try {
			{{SpriteConstructors}}
		} catch(IOException e) {
			JOptionPane.showMessageDialog(null, "Could not load sprites: " + e.getMessage());
			e.printStackTrace();
			return;
		}
		
		frame.setVisible(true); //Makes the window appear
	}
}
